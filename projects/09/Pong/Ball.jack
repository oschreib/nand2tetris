// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/09/Square/Square.jack

/**
 * Implements a graphic square. A graphic square has a screen location
 * and a size. It also has methods for drawing, erasing, moving on the 
 * screen, and changing its size.
 */
class Ball {

    // Location on the screen
    field int x, y;

    // The size of the ball
    field int size;

    // The direction across x
    field int dx;

    // The direction across y
    field int dy;

    field inr score;
    /** Constructs a new ball with a given location and size. */
    constructor Ball new(int Ax, int Ay, int Asize) {
        let x = Ax;
        let y = Ay;
        let size = Asize;
        let dx = 1;
        let dy = 1;
        let score = 0;

        do draw();

        return this;
    }
	
	// Getters
	method int x() { return x; }
	method int y() { return y; }
	method int size() { return size; }

    /** Deallocates the object's memory. */
    method void dispose() {
		do erase();
        do Memory.deAlloc(this);
        return;
    }

    /** Draws the square on the screen. */
    method void draw() {
        do Screen.setColor(true);
        do Screen.drawRectangle(x, y, x + size, y + size);
        return;
    }

    /** Erases the square from the screen. */
    method void erase() {
        do Screen.setColor(false);
        do Screen.drawRectangle(x, y, x + size, y + size);
        return;
    }

	method void bump() {
		let dy = dy * -1;
		return;
	}
    method void move() {
        if (((x + dx) > (509 - size)) | (x + dx < 3)) {
            let dx = dx * -1;
        }

        if (((y + dy) < 2) | ((y + dy) > (253 - size))) {
            let dy = dy * -1;
        }
		/**
        if (y + dy > 254 - size) {
            let score = score +1;
            do Output.moveCursor(0,0);
            do Output.printString("SCORE:");
            do Output.printInt(score);
            do Output.moveCursor(0,0);
            do erase();
            let x = 10;
            let y = 10;
            do draw();
            return;
        }
		*/

		if(dx > 0) {
			do moveRight(2);
		}
		if(dx < 0) {
			do moveLeft(2);
		}
        if(dy > 0) {
			do moveDown(2);
		}
		if(dy < 0) {
			do moveUp(2);
		}
        return;
    }
	
	        /** Moves up by 2 pixels. */
    method void moveUp(int step) {
        if (y > 1) {
            do Screen.setColor(false);
            do Screen.drawRectangle(x, (y + size) - 1, x + size, y + size);
            let y = y - step;
            do Screen.setColor(true);
            do Screen.drawRectangle(x, y, x + size, y + 1);
        }
        return;
    }

    /** Moves down by 2 pixels. */
    method void moveDown(int step) {
        if ((y + size) < 254) {
            do Screen.setColor(false);
            do Screen.drawRectangle(x, y, x + size, y + 1);
            let y = y + step;
            do Screen.setColor(true);
            do Screen.drawRectangle(x, (y + size) - 1, x + size, y + size);
        }
        return;
    }

    /** Moves left by 2 pixels. */
    method void moveLeft(int step) {
        if (x - step > 1) {
            do Screen.setColor(false);
            do Screen.drawRectangle((x + size) - 1, y, x + size, y + size);
            let x = x - step;
            do Screen.setColor(true);
            do Screen.drawRectangle(x, y, x + 1, y + size);
        }
        return;
    }

    /** Moves right by 2 pixels. */
    method void moveRight(int step) {
        if ((x + size + step) < 510) {
            do Screen.setColor(false);
            do Screen.drawRectangle(x, y, x + 1, y + size);
            let x = x + step;
            do Screen.setColor(true);
            do Screen.drawRectangle((x + size) - 1, y, x + size, y + size);
        }
        return;
    }
}
